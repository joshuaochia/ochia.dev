"use strict";

// Selection
let writer;
const navDiv = document.querySelector(".nav-header");
const navBar = document.querySelector(".navbar");
const serviceSection = document.querySelector("#services");

// Section
const allSection = document.querySelectorAll("section");

// Lets Talk
const letsTalk = document.querySelector(".contact-me");

// Modal
const modal = document.querySelector(".modal1");
const closeModalBTN = document.querySelector(".btn--close-modal");
const overlay = document.querySelector(".overlay1");

// Sticky NavBar
const navCallback = function (entries, observe) {
  const [entry] = entries;

  console.log(entry);
  if (!entry.isIntersecting) {
    navBar.classList.add("navbar-shrink");
  } else {
    navBar.classList.remove("navbar-shrink");
  }
};

const navObs = new IntersectionObserver(navCallback, {
  root: null,
  threshold: 0.1,
});

navObs.observe(navDiv);

// Navbar Smooth Scroll
document.querySelector(".navbar-nav").addEventListener("click", function (e) {
  e.preventDefault();

  if (
    !e.target.classList.contains("nav-link") ||
    e.target.classList.contains("contact-me")
  )
    return;

  const id = e.target.getAttribute("href");
  const section = document.querySelector(id);

  section.scrollIntoView({ behavior: "smooth" });
});

// Lets Talk remove modal
const modalFunc = function () {
  if (this === "remove") {
    modal.classList.remove("hidden");
    overlay.classList.remove("hidden");
  } else {
    modal.classList.add("hidden");
    overlay.classList.add("hidden");
  }
};

// Modal Event Listener
letsTalk.addEventListener("click", modalFunc.bind("remove"));
closeModalBTN.addEventListener("click", modalFunc.bind("add"));
window.addEventListener("keydown", function (e) {
  if (e.key === "Escape") {
    modalFunc("add");
  }
});

// Section reveal when intersecting

const sectionCallBack = function (entries, observer) {
  const [entry] = entries;

  // if (!entry.isIntersecting) return;

  entry.target.classList.remove("section--hidden");
  observer.unobserve(entry.target);
};

const sectionObserver = new IntersectionObserver(sectionCallBack, {
  root: null,
  threshold: 0,
  rootMargin: "-100px",
});

allSection.forEach(function (sec) {
  sectionObserver.observe(sec);
});

// Type Writer
const typeWriter = function (txtElement, words, wait = 3000) {
  this.txtElement = txtElement;
  this.words = words;
  this.wait = parseInt(wait, 10);
  this.txt = "";
  this.wordIndex = 0;
  this.type();
  this.isDeleting = false;
};

// Type Method

typeWriter.prototype.type = function () {
  let typeSpeed = 150;
  const current = this.wordIndex;
  const fullTxt = this.words[current];

  if (this.isDeleting) {
    typeSpeed /= 2;
    this.txt = fullTxt.substring(0, this.txt.length - 1);
  } else {
    this.txt = fullTxt.substring(0, this.txt.length + 1);
  }

  if (!this.isDeleting && this.txt === fullTxt) {
    typeSpeed = this.wait;
    this.isDeleting = true;
  } else if (this.isDeleting && this.txt === "") {
    typeSpeed = 1000;
    this.isDeleting = false;
  }
  setTimeout(() => this.type(), typeSpeed);

  this.txtElement.innerHTML = `<span class="txt">${this.txt}</span>`;
};

// Init On DOM load
window.addEventListener("DOMContentLoaded", init);

// Init app
function init() {
  const txtElement = document.querySelector(".txt-type");
  const words = JSON.parse(txtElement.getAttribute("data-words"));
  console.log(words);
  const wait = txtElement.getAttribute("data-wait");

  // Init Type Writer
  writer = new typeWriter(txtElement, words, wait);
}
