"use strict";

// Selection
let writer;
const navDiv = document.querySelector(".nav-header");
const navBar = document.querySelector(".navbar");
const serviceSection = document.querySelector("#services");

// Section
const allSection = document.querySelectorAll("section");

// Lets Talk
const letsTalk = document.querySelector(".contact-me");

// Modal
const modal = document.querySelector(".modal1");
const closeModalBTN = document.querySelector(".btn--close-modal");
const overlay = document.querySelector(".overlay1");

// Sticky NavBar
const navCallback = function (entries, observe) {
  const [entry] = entries;

  if (!entry.isIntersecting) {
    navBar.classList.add("navbar-shrink");
  } else {
    navBar.classList.remove("navbar-shrink");
  }
};

const navObs = new IntersectionObserver(navCallback, {
  root: null,
  threshold: 0.1,
});

navObs.observe(navDiv);

// Navbar Smooth Scroll
document.querySelector(".navbar-nav").addEventListener("click", function (e) {
  e.preventDefault();

  if (
    !e.target.classList.contains("nav-link") ||
    e.target.classList.contains("contact-me")
  )
    return;

  const id = e.target.getAttribute("href");
  const section = document.querySelector(id);

  section.scrollIntoView({ behavior: "smooth" });
});

// Lets Talk remove modal
const modalFunc = function () {
  if (this === "remove") {
    modal.classList.remove("hidden");
    overlay.classList.remove("hidden");
  } else {
    modal.classList.add("hidden");
    overlay.classList.add("hidden");
  }
};

// Modal Event Listener
letsTalk.addEventListener("click", modalFunc.bind("remove"));
closeModalBTN.addEventListener("click", modalFunc.bind("add"));
window.addEventListener("keydown", function (e) {
  if (e.key === "Escape") {
    modalFunc("add");
  }
});

// Section reveal when intersecting

const sectionCallBack = function (entries, observer) {
  const [entry] = entries;

  // if (!entry.isIntersecting) return;

  entry.target.classList.remove("section--hidden");
  observer.unobserve(entry.target);
};

const sectionObserver = new IntersectionObserver(sectionCallBack, {
  root: null,
  threshold: 0,
  rootMargin: "-100px",
});

allSection.forEach(function (sec) {
  sectionObserver.observe(sec);
});

class TyperWriter {
  _txtElement = document.querySelector(".txt-type");
  _words = JSON.parse(this._txtElement.getAttribute("data-words"));
  _wait = this._txtElement.getAttribute("data-wait");
  _txt = "";
  _isDeleting = false;
  _wordIndex = 0;

  constructor(typeSpeed) {
    this.wait = parseInt(this._wait, 10);
    this._writing();
    this.typeSpeed = typeSpeed;
  }

  _writing() {
    let typeSpeed = this.typeSpeed;
    const current = this._wordIndex;
    const fullTxt = this._words[current];

    if (this._isDeleting) {
      typeSpeed /= 2;
      this._txt = fullTxt.substring(0, this._txt.length - 1);
    } else {
      this._txt = fullTxt.substring(0, this._txt.length + 1);
    }

    if (!this._isDeleting && this._txt === fullTxt) {
      typeSpeed = this.wait;
      this._isDeleting = true;
    } else if (this._isDeleting && this._txt === "") {
      typeSpeed = 1000;
      this._isDeleting = false;
    }
    setTimeout(() => this._writing(), typeSpeed);

    this._txtElement.innerHTML = `<span class="txt">${this._txt}</span>`;
  }
}

new TyperWriter(150);
